/*
 * db-rest
 * A clean REST API wrapping around the Deutsche Bahn API.
 *
 * The version of the OpenAPI document: 5.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.example.dbREst.api;

import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Finds journeys from A to B.
     *
     * Uses [&#x60;hafasClient.journeys()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/journeys.md) to **find journeys from A (&#x60;from&#x60;) to B (&#x60;to&#x60;)**.
     */
    @Test
    public void journeysGetTest()  {
        OffsetDateTime departure = null;
        OffsetDateTime arrival = null;
        String earlierThan = null;
        String laterThan = null;
        Integer results = null;
        Boolean stopovers = null;
        Integer transfers = null;
        Integer transferTime = null;
        String accessibility = null;
        Boolean bike = null;
        Boolean startWithWalking = null;
        String walkingSpeed = null;
        Boolean tickets = null;
        Boolean polylines = null;
        Boolean remarks = null;
        Boolean scheduledDays = null;
        String language = null;
        String loyaltyCard = null;
        Boolean firstClass = null;
        Boolean pretty = null;
        List<Object> response = api.journeysGet(departure, arrival, earlierThan, laterThan, results, stopovers, transfers, transferTime, accessibility, bike, startWithWalking, walkingSpeed, tickets, polylines, remarks, scheduledDays, language, loyaltyCard, firstClass, pretty);

        // TODO: test validations
    }
    
    /**
     * Fetches up-to-date realtime data for a journey computed before.
     *
     * Uses [&#x60;hafasClient.refreshJourney()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/refresh-journey.md) to **\&quot;refresh\&quot; a journey, using its &#x60;refreshToken&#x60;**.  The journey will be the same (equal &#x60;from&#x60;, &#x60;to&#x60;, &#x60;via&#x60;, date/time &amp; vehicles used), but you can get up-to-date realtime data, like delays &amp; cancellations.
     */
    @Test
    public void journeysRefGetTest()  {
        String ref = null;
        Boolean stopovers = null;
        Boolean tickets = null;
        Boolean polylines = null;
        Boolean remarks = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.journeysRefGet(ref, stopovers, tickets, polylines, remarks, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Finds stops/stations, POIs and addresses matching a query.
     *
     * Uses [&#x60;hafasClient.locations()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/locations.md) to **find stops/stations, POIs and addresses matching &#x60;query&#x60;**.
     */
    @Test
    public void locationsGetTest()  {
        String query = null;
        Boolean fuzzy = null;
        Integer results = null;
        Boolean stops = null;
        Boolean addresses = null;
        Boolean poi = null;
        Boolean linesOfStops = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.locationsGet(query, fuzzy, results, stops, addresses, poi, linesOfStops, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Finds all vehicles currently in an area.
     *
     * Uses [&#x60;hafasClient.radar()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/radar.md) to **find all vehicles currently in an area**, as well as their movements.
     */
    @Test
    public void radarGetTest()  {
        Integer results = null;
        Integer duration = null;
        Integer frames = null;
        Boolean polylines = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.radarGet(results, duration, frames, polylines, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Autocompletes stops/stations by name or filters stops/stations.
     *
     * If the &#x60;query&#x60; parameter is used, it will use [&#x60;db-stations-autocomplete@2&#x60;](https://github.com/derhuerst/db-stations-autocomplete/tree/2.2.0) to autocomplete *Deutsche Bahn*-operated stops/stations by name. Otherwise, it will filter the stops/stations in [&#x60;db-stations@3&#x60;](https://github.com/derhuerst/db-stations/tree/3.0.1).  Instead of receiving a JSON response, you can request [newline-delimited JSON](http://ndjson.org) by sending &#x60;Accept: application/x-ndjson&#x60;.
     */
    @Test
    public void stationsGetTest()  {
        String query = null;
        Integer limit = null;
        Boolean fuzzy = null;
        Boolean completion = null;
        Object response = api.stationsGet(query, limit, fuzzy, completion);

        // TODO: test validations
    }
    
    /**
     * Returns a stop/station from &#x60;db-stations&#x60;.
     *
     * Returns a stop/station from [&#x60;db-stations@3&#x60;](https://github.com/derhuerst/db-stations/tree/3.0.1).
     */
    @Test
    public void stationsIdGetTest()  {
        String id = null;
        Object response = api.stationsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Fetches arrivals at a stop/station.
     *
     * Works like &#x60;/stops/{id}/departures&#x60;, except that it uses [&#x60;hafasClient.arrivals()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/arrivals.md) to **query arrivals at a stop/station**.
     */
    @Test
    public void stopsIdArrivalsGetTest()  {
        String id = null;
        OffsetDateTime when = null;
        String direction = null;
        Integer duration = null;
        Integer results = null;
        Boolean linesOfStops = null;
        Boolean remarks = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.stopsIdArrivalsGet(id, when, direction, duration, results, linesOfStops, remarks, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Fetches departures at a stop/station.
     *
     * Uses [&#x60;hafasClient.departures()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/departures.md) to **query departures at a stop/station**.
     */
    @Test
    public void stopsIdDeparturesGetTest()  {
        String id = null;
        OffsetDateTime when = null;
        String direction = null;
        Integer duration = null;
        Integer results = null;
        Boolean linesOfStops = null;
        Boolean remarks = null;
        String language = null;
        Boolean pretty = null;
        Object response = api.stopsIdDeparturesGet(id, when, direction, duration, results, linesOfStops, remarks, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Finds a stop/station by ID.
     *
     * Uses [&#x60;hafasClient.stop()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/stop.md) to **find a stop/station by ID**.
     */
    @Test
    public void stopsIdGetTest()  {
        String id = null;
        Boolean linesOfStops = null;
        String language = null;
        Boolean pretty = null;
        Object response = api.stopsIdGet(id, linesOfStops, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Finds stops/stations close to a geolocation.
     *
     * Uses [&#x60;hafasClient.nearby()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/nearby.md) to **find stops/stations close to the given geolocation**.
     */
    @Test
    public void stopsNearbyGetTest()  {
        Integer results = null;
        Integer distance = null;
        Boolean stops = null;
        Boolean poi = null;
        Boolean linesOfStops = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.stopsNearbyGet(results, distance, stops, poi, linesOfStops, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Finds stops/stations reachable within a certain time from an address.
     *
     * Uses [&#x60;hafasClient.reachableFrom()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/reachable-from.md) to **find stops/stations reachable within a certain time from an address**.
     */
    @Test
    public void stopsReachableFromGetTest()  {
        OffsetDateTime when = null;
        Integer maxTransfers = null;
        Integer maxDuration = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.stopsReachableFromGet(when, maxTransfers, maxDuration, language, pretty);

        // TODO: test validations
    }
    
    /**
     * Fetches a trip by ID.
     *
     * Uses [&#x60;hafasClient.trip()&#x60;](https://github.com/public-transport/hafas-client/blob/5/docs/trip.md) to **fetch a trip by ID**.
     */
    @Test
    public void tripsIdGetTest()  {
        String id = null;
        String lineName = null;
        Boolean stopovers = null;
        Boolean remarks = null;
        Boolean polyline = null;
        String language = null;
        Boolean pretty = null;
        List<Object> response = api.tripsIdGet(id, lineName, stopovers, remarks, polyline, language, pretty);

        // TODO: test validations
    }
    
}