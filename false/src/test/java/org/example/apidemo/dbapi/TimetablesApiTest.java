/*
 * Timetables
 * API for passenger information for train stations operated by DB Station&Service AG
 *
 * The version of the OpenAPI document: 1.0.213
 * Contact: dbopendata@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.example.apidemo.dbapi;

import org.example.apidemo.dbpapimodell.MultipleStationData;
import org.example.apidemo.dbpapimodell.Timetable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for TimetablesApi
 */
@Disabled
public class TimetablesApiTest {

    private final TimetablesApi api = new TimetablesApi();

    
    /**
     * Returns all known changes for a station
     *
     * Returns a Timetable object (see Timetable) that contains all known changes for the station given by evaNo.  The data includes all known changes from now on until ndefinitely into the future. Once changes become obsolete (because their trip departs from the station) they are removed from this resource.  Changes may include messages. On event level, they usually contain one or more of the &#39;changed&#39; attributes ct, cp, cs or cpth. Changes may also include &#39;planned&#39; attributes if there is no associated planned data for the change (e.g. an unplanned stop or trip).  Full changes are updated every 30s and should be cached for that period by web caches. 
     */
    @Test
    public void fchgEvaNoGetTest()  {
        String evaNo = null;
        Timetable response = api.fchgEvaNoGet(evaNo);

        // TODO: test validations
    }
    
    /**
     * Returns planned data for the specified station within an hourly time slice
     *
     * Returns a Timetable object (see Timetable) that contains planned data for the specified station (evaNo) within the hourly time slice given by date (format YYMMDD) and hour (format HH). The data includes stops for all trips that arrive or depart within that slice. There is a small overlap between slices since some trips arrive in one slice and depart in another.  Planned data does never contain messages. On event level, planned data contains the &#39;plannned&#39; attributes pt, pp, ps and ppth while the &#39;changed&#39; attributes ct, cp, cs and cpth are absent.  Planned data is generated many hours in advance and is static, i.e. it does never change. It should be cached by web caches.public interface allows access to information about a station. 
     */
    @Test
    public void planEvaNoDateHourGetTest()  {
        String evaNo = null;
        String date = null;
        String hour = null;
        Timetable response = api.planEvaNoDateHourGet(evaNo, date, hour);

        // TODO: test validations
    }
    
    /**
     * Returns all recent changes for a station
     *
     * Returns a Timetable object (see Timetable) that contains all recent changes for the station given by evaNo. Recent changes are always a subset of the full changes. They may equal full changes but are typically much smaller. Data includes only those changes that became known within the last 2 minutes.  A client that updates its state in intervals of less than 2 minutes should load full changes initially and then proceed to periodically load only the recent changes in order to save bandwidth.  Recent changes are updated every 30s as well and should be cached for that period by web caches. 
     */
    @Test
    public void rchgEvaNoGetTest()  {
        String evaNo = null;
        Timetable response = api.rchgEvaNoGet(evaNo);

        // TODO: test validations
    }
    
    /**
     * Returns information about stations matching the given pattern
     *
     * This public interface allows access to information about a station.
     */
    @Test
    public void stationPatternGetTest()  {
        String pattern = null;
        MultipleStationData response = api.stationPatternGet(pattern);

        // TODO: test validations
    }
    
}